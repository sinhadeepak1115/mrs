// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  password String
  role     Role      @default(USER)
  //Bookings
  Booking  Booking[]
}

model Movie {
  id        String   @id @default(cuid())
  title     String
  genre     String
  time      Int
  language  String
  //shows
  createdAt DateTime @default(now())
  Show      Show[]
}

model Theater {
  id        String   @id @default(cuid())
  name      String
  location  String
  //Screens
  createdAt DateTime @default(now())
  Screen    Screen[]
}

model Screen {
  id        String  @id @default(cuid())
  name      String
  theaterId String
  theater   Theater @relation(fields: [theaterId], references: [id])
  capacity  Int
  //Shows
  Show      Show[]
}

model Show {
  id        String    @id @default(cuid())
  movie     Movie     @relation(fields: [movieId], references: [id])
  movieId   String
  screen    Screen    @relation(fields: [screenId], references: [id])
  screenId  String
  startTime DateTime
  price     Float
  //Bookings
  Booking   Booking[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Booking {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  show      Show          @relation(fields: [showId], references: [id])
  showId    String
  seatCount Int
  total     Float
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
}
